// H_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)h%20Replace%20the%20contents%20of,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20of%20the%20pattern%20space. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)h%20Replace%20the%20contents%20of,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20of%20the%20pattern%20space.

// HCmd represents an 'h' command in sed, which replaces or appends the contents of the pattern space to the hold space.
type HCmd struct {
	addr    *address
	replace bool
}

// match checks if the given line matches the address criteria of the HCmd.
func (c *HCmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

// String returns a string representation of the HCmd, including its address and replace status.
func (c *HCmd) String() string {
	if c != nil {
		if c.addr != nil {
			if c.replace {
				return fmt.Sprintf("{h command with replace addr:%s}", c.addr.String())
			}
			return fmt.Sprintf("{h command Cmd addr:%s}", c.addr.String())
		}
		if c.replace {
			return fmt.Sprint("{h command with replace }")
		}
		return fmt.Sprint("{h command")
	}
	return fmt.Sprint("{h command}")
}

// processLine processes the input line for the HCmd, replacing or appending the pattern space as specified.
func (c *HCmd) processLine(s *Sed) (bool, error) {
	if c.replace {
		s.holdSpace = copyByteSlice(s.patternSpace)
	} else {
		buf := bytes.NewBuffer(s.patternSpace)
		buf.WriteRune('\n')
		buf.Write(s.holdSpace)
		s.patternSpace = buf.Bytes()
	}
	return false, nil
}

// NewHCmd creates a new HCmd instance from the given pieces of input and address.
func NewHCmd(pieces [][]byte, addr *address) (*HCmd, error) {
	if len(pieces) > 1 {
		return nil, ErrWrongNumberOfCommandParameters
	}
	cmd := new(HCmd)
	if pieces[0][0] == 'h' {
		cmd.replace = true
	}
	cmd.addr = addr
	return cmd, nil
}

// E-OF: H_CMD //
