// I_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)i%5C,the%20standard%20output. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)i%5C,the%20standard%20output.

// ICmd represents an 'i' command in sed, which inserts text before the current pattern space and outputs it to the standard output.
type ICmd struct {
	addr *address
	text []byte
}

// match checks if the given line matches the address criteria of the ICmd.
func (c *ICmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

// String returns a string representation of the ICmd, including its address and text.
func (c *ICmd) String() string {
	if c != nil {
		if c.addr != nil {
			return fmt.Sprintf("{i command addr:%s text:%s}", c.addr.String(), string(c.text))
		}
		return fmt.Sprintf("{i command text:%s}", string(c.text))
	}
	return fmt.Sprintf("{i command}")
}

// processLine processes the input line for the ICmd. It does not alter the pattern space.
func (c *ICmd) processLine(_ *Sed) (bool, error) {
	return false, nil
}

// NewICmd creates a new ICmd instance from the given line of input and address.
func NewICmd(s *Sed, line []byte, addr *address) (*ICmd, error) {
	cmd := new(ICmd)
	cmd.addr = addr
	cmd.text = line[1:]
	for bytes.HasSuffix(cmd.text, []byte{'\\'}) {
		cmd.text = cmd.text[0 : len(cmd.text)-1]
		line, err := s.getNextScriptLine()
		if err != nil {
			break
		}
		buf := bytes.NewBuffer(cmd.text)
		buf.Write(line)
		s.patternSpace = buf.Bytes()
	}
	return cmd, nil
}

// E-OF: I_CMD //
