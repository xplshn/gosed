// S_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)s/regular%2Dexpression/replacement/flags,regular%2Dexpression%20in%20the%20pattern%20space. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)s/regular%2Dexpression/replacement/flags,regular%2Dexpression%20in%20the%20pattern%20space.

// SCmd represents an 's' command in sed, which performs a substitution based on a regular expression in the pattern space.
type SCmd struct {
	addr         *address
	regex        string
	replace      []byte
	nthOccurance int
	re           *regexp.Regexp
}

// match checks if the given line matches the address criteria of the SCmd.
func (c *SCmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

// String returns a string representation of the SCmd, including its address, regex, replacement, and nth occurrence.
func (c *SCmd) String() string {
	if c.addr != nil {
		return fmt.Sprintf("{s command addr:%s regex:%v replace:%s nth occurrence:%d}", c.addr, c.regex, c.replace, c.nthOccurance)
	}
	return fmt.Sprintf("{s command regex:%v replace:%s nth occurrence:%d}", c.regex, c.replace, c.nthOccurance)
}

// NewSCmd creates a new SCmd instance from the given pieces of input and address.
func NewSCmd(pieces [][]byte, addr *address) (*SCmd, error) {
	if len(pieces) != 4 {
		return nil, ErrWrongNumberOfCommandParameters
	}

	cmd := &SCmd{
		addr: addr,
		regex: string(pieces[1]),
		replace: pieces[2],
	}

	if len(cmd.regex) == 0 {
		return nil, ErrRegularExpressionExpected
	}

	var err error
	cmd.re, err = regexp.CompilePOSIX(cmd.regex)
	if err != nil {
		return nil, err
	}

	flag := string(pieces[3])
	if flag == "g" {
		cmd.nthOccurance = globalReplace
	} else {
		cmd.nthOccurance = 1
		if len(flag) > 0 {
			cmd.nthOccurance, err = strconv.Atoi(flag)
			if err != nil {
				return nil, ErrInvalidSCommandFlag
			}
		}
	}

	return cmd, nil
}

// processLine processes the input line for the SCmd, performing substitutions based on the regular expression.
func (c *SCmd) processLine(s *Sed) (bool, error) {
	if c.nthOccurance == globalReplace {
		s.patternSpace = c.re.ReplaceAll(s.patternSpace, c.replace)
		return false, nil
	}

	count := 0
	line := s.patternSpace
	s.patternSpace = make([]byte, 0)
	for {
		matches := c.re.FindIndex(line)
		if len(matches) > 0 {
			count++
			if count == c.nthOccurance {
				buf := bytes.NewBuffer(s.patternSpace)
				buf.Write(line[:matches[0]])
				buf.Write(c.replace)
				buf.Write(line[matches[1]:])
				s.patternSpace = buf.Bytes()
				break
			}
			buf := bytes.NewBuffer(s.patternSpace)
			buf.Write(line[:matches[0]+1])
			s.patternSpace = buf.Bytes()
			line = line[matches[0]+1:]
			continue
		}
		buf := bytes.NewBuffer(s.patternSpace)
		buf.Write(line)
		s.patternSpace = buf.Bytes()
		break
	}
	return false, nil
}

// E-OF: S_CMD //
