// N_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)n%20Copy%20the%20pattern%20space,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20changes.) // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)n%20Copy%20the%20pattern%20space,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20changes.)

// NCmd represents an 'n' command in sed, which either prints the pattern space and replaces it with the next line ('n') or appends the next line of input to the pattern space ('N').
type NCmd struct {
	addr   *address
	append bool // Distinguishes between 'n' (false) and 'N' (true)
}

// match checks if the given line matches the address criteria of the NCmd.
func (c *NCmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

// String returns a string representation of the NCmd, including its address and whether it appends or replaces.
func (c *NCmd) String() string {
	if c != nil {
		if c.addr != nil {
			if c.append {
				return fmt.Sprintf("{N command addr:%s}", c.addr.String())
			}
			return fmt.Sprintf("{n command addr:%s}", c.addr.String())
		}
		if c.append {
			return fmt.Sprint("{N command}")
		}
		return fmt.Sprint("{n command}")
	}
	return fmt.Sprint("{n/N command}")
}

// processLine processes the input line for the NCmd. It either prints the pattern space and replaces it with the next line or appends the next line to the pattern space.
func (c *NCmd) processLine(s *Sed) (bool, error) {
	if c.append {
		// N: Append the next line of input to the pattern space
		nextLine, err := s.input.ReadBytes('\n')
		if err != nil {
			if err == io.EOF {
				return false, nil
			}
			return false, err
		}
		s.patternSpace = append(s.patternSpace, '\n')
		s.patternSpace = append(s.patternSpace, nextLine...)
	} else {
		// n: Print and replace pattern space with the next line
		if !*quiet {
			s.printPatternSpace()
		}
		nextLine, err := s.input.ReadBytes('\n')
		if err != nil {
			if err == io.EOF {
				return false, nil
			}
			return false, err
		}
		s.patternSpace = nextLine
	}
	return true, nil
}

// NewNCmd creates a new NCmd instance from the given pieces and address.
func NewNCmd(pieces [][]byte, addr *address) (*NCmd, error) {
	if len(pieces) > 1 {
		return nil, ErrWrongNumberOfCommandParameters
	}
	cmd := &NCmd{
		addr:   addr,
		append: pieces[0][0] == 'N',
	}
	return cmd, nil
}

// E-OF: N_CMD //
