// ./definitions/*
// sed
//
// Original code: Copyright (c) 2009 Geoffrey Clements (MIT License)
// Modified code: Copyright (c) 2024 xplshn (3BSD License)
// For details, see LICENSE file in the root directory of this project.

// In order to generate commands.go, you must do `cat ./definitions/*.gopart > ./commands.go`
// This is why a_cmd.gopart is the only file that includes the License header

// Package sed implements the entire program
package sed

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"regexp"
	"strconv"
)

// Used in other parts of the `sed` package.
const (
	globalReplace = -1
)
// E-OF-HEADER

// A_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)a%5C,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next%20input%20line. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)a%5C,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next%20input%20line.

// ACmd represents an 'a' command in sed.
type ACmd struct {
	addr *address
	text []byte
}

func (c *ACmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

func (c *ACmd) String() string {
	if c != nil {
		if c.addr != nil {
			return fmt.Sprintf("{a command addr:%s text:%s}", c.addr.String(), c.text)
		}
		return fmt.Sprintf("{a command text:%s}", c.text)
	}
	return fmt.Sprintf("{a command}")
}

func (c *ACmd) processLine(_ *Sed) (bool, error) {
	return false, nil
}

// NewACmd creates a new aCmd instance from the given Sed object, line, and address.
func NewACmd(s *Sed, line []byte, addr *address) (*ACmd, error) {
	cmd := new(ACmd)
	cmd.addr = addr
	cmd.text = line[1:]
	for bytes.HasSuffix(cmd.text, []byte{'\\'}) {
		cmd.text = cmd.text[0 : len(cmd.text)-1]
		line, err := s.getNextScriptLine()
		if err != nil {
			break
		}
		buf := bytes.NewBuffer(cmd.text)
		buf.WriteRune('\n')
		buf.Write(line)
		cmd.text = buf.Bytes()
	}
	cmd.text = trimSpaceFromBeginning(cmd.text)
	return cmd, nil
}

// E-OF: A_CMD //
