// R_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)r%20rfile,reading%20the%20next%20input%20line. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)r%20rfile,reading%20the%20next%20input%20line.

// RCmd represents an 'r' command in sed, which reads a file and appends its contents to the pattern space.
type RCmd struct {
	addr *address
	text []byte // Text to be written to the output file
}

// match checks if the given line matches the address criteria of the RCmd.
func (c *RCmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

// String returns a string representation of the RCmd, including its address and the text.
func (c *RCmd) String() string {
	if c.addr != nil {
		return fmt.Sprintf("{r command addr:%s}", c.addr.String())
	}
	return fmt.Sprint("{r command}")
}

// processLine writes the stored text to the output file if it exists.
func (c *RCmd) processLine(s *Sed) (bool, error) {
	if c.text != nil {
		_, err := s.outputFile.Write(c.text)
		if err != nil {
			return false, err
		}
	}
	return false, nil
}

// NewRCmd creates a new RCmd instance from the given line and address.
// It initializes the command with the text specified after the 'r' command, if provided.
func NewRCmd(line []byte, addr *address) (*RCmd, error) {
	if len(line) > 1 {
		line = line[1:] // Remove the initial 'r' character
	} else {
		line = nil
	}
	cmd := &RCmd{
		addr: addr,
		text: line,
	}
	return cmd, nil
}

// E-OF: R_CMD //
