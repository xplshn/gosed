// Q_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)q%20Quit.%20%20Branch%20to%20the,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20cycle. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)q%20Quit.%20%20Branch%20to%20the,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20cycle.

// QCmd represents a 'q' command in sed, which terminates the sed process with a specified exit code.
type QCmd struct {
	addr     *address
	exitCode int // The exit code to return when the 'q' command is executed
}

// match checks if the given line matches the address criteria of the QCmd.
func (c *QCmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

// String returns a string representation of the QCmd, including its address and exit code.
func (c *QCmd) String() string {
	if c != nil {
		if c.addr != nil {
			return fmt.Sprintf("{q command addr:%s with exit code: %d}", c.addr.String(), c.exitCode)
		}
		return fmt.Sprintf("{q command with exit code: %d}", c.exitCode)
	}
	return fmt.Sprint("{q command}")
}

// NewQCmd creates a new QCmd instance from the given pieces and address.
// It parses the exit code if provided, or defaults to 0.
func NewQCmd(pieces [][]byte, addr *address) (*QCmd, error) {
	var err error
	cmd := &QCmd{
		addr: addr,
	}
	switch len(pieces) {
	case 2:
		cmd.exitCode, err = strconv.Atoi(string(pieces[1]))
		if err != nil {
			return nil, err
		}
	case 1:
		cmd.exitCode = 0
	default:
		return nil, ErrWrongNumberOfCommandParameters
	}
	return cmd, nil
}

// processLine terminates the sed process with the exit code specified in the QCmd.
func (c *QCmd) processLine(_ *Sed) (bool, error) {
	os.Exit(c.exitCode)
	return false, nil
}

// E-OF: Q_CMD //
