// Q_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)q%20Quit.%20%20Branch%20to%20the,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20cycle. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)q%20Quit.%20%20Branch%20to%20the,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20cycle.
type q_cmd struct {
	addr      *address
	exit_code int
}

func (c *q_cmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

func (c *q_cmd) String() string {
	if c != nil {
		if c.addr != nil {
			return fmt.Sprintf("{q command addr:%s with exit code: %d}", c.addr.String(), c.exit_code)
		}
		return fmt.Sprintf("{q command with exit code: %d}", c.exit_code)
	}
	return fmt.Sprint("{q command}")
}

func NewQCmd(pieces [][]byte, addr *address) (c *q_cmd, err error) {
	err = nil
	c = nil
	switch len(pieces) {
	case 2:
		c = new(q_cmd)
		c.addr = addr
		c.exit_code, err = strconv.Atoi(string(pieces[1]))
		if err != nil {
			c = nil
		}
	case 1:
		c = new(q_cmd)
		c.addr = addr
		c.exit_code = 0
	default:
		c, err = nil, WrongNumberOfCommandParameters
	}
	return c, err
}

func (c *q_cmd) processLine(s *Sed) (stop bool, err error) {
	os.Exit(c.exit_code)
	return false, nil
}
// E-OF: Q_CMD //
