// D_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)d%20Delete%20the%20pattern%20space.,newline.%20%20Start%20the%20next%20cycle. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)d%20Delete%20the%20pattern%20space.,newline.%20%20Start%20the%20next%20cycle.

// DCmd represents a 'd' command in sed, which deletes the pattern space up to the first newline or entirely.
type DCmd struct {
	addr             *address
	upToFirstNewLine bool
}

// match checks if the given line matches the address criteria of the DCmd.
func (c *DCmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

// String returns a string representation of the DCmd, including its address and whether it deletes up to the first newline.
func (c *DCmd) String() string {
	if c.addr != nil {
		if c.upToFirstNewLine {
			return fmt.Sprintf("{d command addr:%s up to first newline}", c.addr.String())
		}
		return fmt.Sprintf("{d command addr:%s}", c.addr.String())
	}
	if c.upToFirstNewLine {
		return "{d command up to first newline}"
	}
	return "{d command}"
}

// processLine processes the input line for the DCmd, deleting the pattern space up to the first newline if specified.
func (c *DCmd) processLine(s *Sed) (bool, error) {
	if c.upToFirstNewLine {
		idx := bytes.IndexByte(s.patternSpace, '\n')
		if idx >= 0 && idx+1 < len(s.patternSpace) {
			s.patternSpace = s.patternSpace[idx+1:]
		} else {
			s.patternSpace = s.patternSpace[:0] // Clear pattern space if newline is not found
		}
	}
	return true, nil
}

// NewDCmd creates a new DCmd instance from the given pieces of input and address.
func NewDCmd(pieces [][]byte, addr *address) (*DCmd, error) {
	if len(pieces) > 1 {
		return nil, ErrWrongNumberOfCommandParameters
	}
	cmd := &DCmd{
		addr: addr,
	}
	if len(pieces) > 0 && pieces[0][0] == 'D' {
		cmd.upToFirstNewLine = true
	}
	return cmd, nil
}

// E-OF: dCmd //
