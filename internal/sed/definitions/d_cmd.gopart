// D_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)d%20Delete%20the%20pattern%20space.,newline.%20%20Start%20the%20next%20cycle. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)d%20Delete%20the%20pattern%20space.,newline.%20%20Start%20the%20next%20cycle.
type d_cmd struct {
	addr             *address
	upToFirstNewLine bool
}

func (c *d_cmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

func (c *d_cmd) String() string {
	if c != nil && c.addr != nil {
		return fmt.Sprintf("{d command addr:%s}", c.addr.String())
	}
	return fmt.Sprintf("{d command}")
}

func (c *d_cmd) processLine(s *Sed) (bool, error) {
	if c.upToFirstNewLine {
		idx := bytes.IndexByte(s.patternSpace, '\n')
		if idx >= 0 && idx+1 < len(s.patternSpace) {
			s.patternSpace = s.patternSpace[idx+1:]
			return false, nil
		}
	}
	return true, nil
}

func NewDCmd(pieces [][]byte, addr *address) (*d_cmd, error) {
	if len(pieces) > 1 {
		return nil, WrongNumberOfCommandParameters
	}
	cmd := new(d_cmd)
	if pieces[0][0] == 'D' {
		cmd.upToFirstNewLine = true
	}
	cmd.addr = addr
	return cmd, nil
}
// E-OF: D_CMD //
