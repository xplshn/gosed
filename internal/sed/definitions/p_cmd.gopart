// P_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)p%20Print.%20%20Copy%20the%20pattern,newline%20to%20the%20standard%20output. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)p%20Print.%20%20Copy%20the%20pattern,newline%20to%20the%20standard%20output.
type p_cmd struct {
	addr        *address
	upToNewLine bool
}

func (c *p_cmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

func (c *p_cmd) String() string {
	if c != nil && c.addr != nil {
		return fmt.Sprintf("{p command addr:%s}", c.addr.String())
	}
	return fmt.Sprint("{p command}")
}

func (c *p_cmd) processLine(s *Sed) (bool, error) {
	// print output space
	if c.upToNewLine {
		firstLine := bytes.SplitN(s.patternSpace, []byte{'\n'}, 1)[0]
		fmt.Fprintln(s.outputFile, string(firstLine))
	} else {
		fmt.Fprintln(s.outputFile, string(s.patternSpace))
	}
	return false, nil
}

func NewPCmd(pieces [][]byte, addr *address) (*p_cmd, error) {
	if len(pieces) > 1 {
		return nil, WrongNumberOfCommandParameters
	}
	cmd := new(p_cmd)
	cmd.addr = addr
	cmd.upToNewLine = pieces[0][0] == 'P'
	return cmd, nil
}
// E-OF: P_CMD //
