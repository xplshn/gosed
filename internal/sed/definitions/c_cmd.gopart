// C_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)c%5C,output.%20%20Start%20the%20next%20cycle. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)c%5C,output.%20%20Start%20the%20next%20cycle.
type c_cmd struct {
	addr *address
	text []byte
}

func (c *c_cmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

func (c *c_cmd) String() string {
	if c != nil {
		if c.addr != nil {
			return fmt.Sprintf("{c command addr:%s text:%s}", c.addr.String(), c.text)
		}
		return fmt.Sprintf("{c command text:%s}", c.text)
	}
	return fmt.Sprintf("{c command}")
}

func (c *c_cmd) printText(s *Sed) {
	// we are going to get the newline from the
	s.outputFile.Write(c.text)
}

func (c *c_cmd) processLine(s *Sed) (bool, error) {
	s.patternSpace = s.patternSpace[0:0]
	if c.addr != nil {
		switch c.addr.address_type {
		case ADDRESS_RANGE:
			if s.lineNumber+1 == c.addr.rangeEnd {
				c.printText(s)
				return true, nil
			}
		case ADDRESS_LINE, ADDRESS_REGEX, ADDRESS_LAST_LINE:
			c.printText(s)
			return true, nil
		case ADDRESS_TO_END_OF_FILE:
			// FIX need to output at end of file
		}
	} else {
		c.printText(s)
		return true, nil
	}
	return false, nil
}

func NewCCmd(s *Sed, line []byte, addr *address) (*c_cmd, error) {
	cmd := new(c_cmd)
	cmd.addr = addr
	cmd.text = line[1:]
	for bytes.HasSuffix(cmd.text, []byte{'\\'}) {
		cmd.text = cmd.text[0 : len(cmd.text)-1]
		line, err := s.getNextScriptLine()
		if err != nil {
			break
		}
		buf := bytes.NewBuffer(cmd.text)
		buf.WriteRune('\n')
		buf.Write(line)
		cmd.text = buf.Bytes()
	}
	return cmd, nil
}
// E-OF: C_CMD //
