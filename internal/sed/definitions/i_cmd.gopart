// I_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)i%5C,the%20standard%20output. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(1)i%5C,the%20standard%20output.
type i_cmd struct {
	addr *address
	text []byte
}

func (c *i_cmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

func (c *i_cmd) String() string {
	if c != nil {
		if c.addr != nil {
			return fmt.Sprintf("{i command addr:%s text:%s}", c.addr.String(), string(c.text))
		}
		return fmt.Sprintf("{i command text:%s}", string(c.text))
	}
	return fmt.Sprintf("{i command}")
}

func (c *i_cmd) processLine(s *Sed) (bool, error) {
	return false, nil
}

func NewICmd(s *Sed, line []byte, addr *address) (*i_cmd, error) {
	cmd := new(i_cmd)
	cmd.addr = addr
	cmd.text = line[1:]
	for bytes.HasSuffix(cmd.text, []byte{'\\'}) {
		cmd.text = cmd.text[0 : len(cmd.text)-1]
		line, err := s.getNextScriptLine()
		if err != nil {
			break
		}
		// cmd.text = bytes.AddByte(cmd.text, '\n')
		buf := bytes.NewBuffer(cmd.text)
		buf.Write(line)
		s.patternSpace = buf.Bytes()
	}
	return cmd, nil
}
// E-OF: I_CMD //
