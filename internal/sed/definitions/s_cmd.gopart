// S_CMD // As defined in: https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)s/regular%2Dexpression/replacement/flags,regular%2Dexpression%20in%20the%20pattern%20space. // PERMALINK: https://web.archive.org/web/20240730163415/https://man.cat-v.org/unix_10th/1/sed#:~:text=(2)s/regular%2Dexpression/replacement/flags,regular%2Dexpression%20in%20the%20pattern%20space.
const (
	global_replace = -1
)

type s_cmd struct {
	addr         *address
	regex        string
	replace      []byte
	nthOccurance int
	re           *regexp.Regexp
}

func (c *s_cmd) match(line []byte, lineNumber int) bool {
	return c.addr.match(line, lineNumber)
}

func (c *s_cmd) String() string {
	if c != nil {
		if c.addr != nil {
			return fmt.Sprintf("{s command addr:%s regex:%v replace:%s nth occurance:%d}", c.addr, c.regex, c.replace, c.nthOccurance)
		}
		return fmt.Sprintf("{s command regex:%v replace:%s nth occurance:%d}", c.regex, c.replace, c.nthOccurance)
	}
	return "{s command}"
}

func NewSCmd(pieces [][]byte, addr *address) (c *s_cmd, err error) {
	if len(pieces) != 4 {
		return nil, WrongNumberOfCommandParameters
	}

	err = nil
	c = new(s_cmd)
	c.addr = addr

	c.regex = string(pieces[1])
	if len(c.regex) == 0 {
		return nil, RegularExpressionExpected
	}
	c.re, err = regexp.CompilePOSIX(string(c.regex))
	if err != nil {
		return nil, err
	}

	c.replace = pieces[2]

	flag := string(pieces[3])
	if flag != "g" {
		c.nthOccurance = 1
		if len(flag) > 0 {
			c.nthOccurance, err = strconv.Atoi(flag)
			if err != nil {
				return nil, InvalidSCommandFlag
			}
		}
	} else {
		c.nthOccurance = global_replace
	}

	return c, err
}

func (c *s_cmd) processLine(s *Sed) (stop bool, err error) {
	stop, err = false, nil

	switch c.nthOccurance {
	case global_replace:
		s.patternSpace = c.re.ReplaceAll(s.patternSpace, c.replace)
	default:
		// a numeric flag command
		count := 0
		line := s.patternSpace
		s.patternSpace = make([]byte, 0)
		for {
			matches := c.re.FindIndex(line)
			if len(matches) > 0 {
				count++
				if count == c.nthOccurance {
					buf := bytes.NewBuffer(s.patternSpace)
					buf.Write(line[0:matches[0]])
					buf.Write(c.replace)
					buf.Write(line[matches[1]:])
					s.patternSpace = buf.Bytes()
					break
				} else {
					buf := bytes.NewBuffer(s.patternSpace)
					buf.Write(line[0 : matches[0]+1])
					s.patternSpace = buf.Bytes()
				}
				line = line[matches[0]+1:]
			} else {
				buf := bytes.NewBuffer(s.patternSpace)
				buf.Write(line)
				s.patternSpace = buf.Bytes()
				break
			}
		}
	}
	return stop, err
}
// E-OF: S_CMD //
